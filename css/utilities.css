/* ===================================================================
   Utility Classes
   ================================================================
   
   This file contains reusable utility classes for common patterns.
   These classes provide quick styling solutions without custom CSS.
   
   Categories:
   - Flexbox utilities
   - Spacing utilities
   - Display utilities
   - Visibility utilities
   - Opacity utilities
   - State utilities (fade, slide, scale)
   - Loading state utilities
   - Success/Warning/Error states
   - Disabled state
   - Focus trap utilities
   - Screen reader utilities
   ================================================================ */

/* ===================================================================
   Layout Utility Classes
   ================================================================ */

/* Flexbox utilities */
.flex {
  display: flex;
}

.flex-col {
  flex-direction: column;
}

.flex-wrap {
  flex-wrap: wrap;
}

.items-center {
  align-items: center;
}

.items-start {
  align-items: flex-start;
}

.items-end {
  align-items: flex-end;
}

.justify-center {
  justify-content: center;
}

.justify-between {
  justify-content: space-between;
}

.justify-end {
  justify-content: flex-end;
}

.flex-1 {
  flex: 1;
}

.flex-shrink-0 {
  flex-shrink: 0;
}

/* Spacing utilities */
.gap-2 {
  gap: var(--space-2);
}

.gap-3 {
  gap: var(--space-3);
}

.gap-4 {
  gap: var(--space-4);
}

.gap-6 {
  gap: var(--space-6);
}

/* Visibility utilities */
.hidden {
  display: none;
}

.sr-only {
  position: absolute;
  width: 1px;
  height: 1px;
  padding: 0;
  margin: -1px;
  overflow: hidden;
  clip: rect(0, 0, 0, 0);
  white-space: nowrap;
  border: 0;
}

/* ===================================================================
   Display & Visibility Utilities
   ================================================================ */

/* Display utilities */
.block {
  display: block;
}

.inline-block {
  display: inline-block;
}

.inline {
  display: inline;
}

.none {
  display: none;
}

/* Visibility utilities */
.visible {
  visibility: visible;
}

.invisible {
  visibility: hidden;
}

.opacity-0 {
  opacity: 0;
}

.opacity-50 {
  opacity: 0.5;
}

.opacity-75 {
  opacity: 0.75;
}

.opacity-100 {
  opacity: 1;
}

/* ===================================================================
   State Utilities with Transitions
   ================================================================ */

/* State utilities with transitions */
.fade-in {
  opacity: 0;
  animation: fadeIn var(--transition-normal) ease-out forwards;
}

.fade-out {
  opacity: 1;
  animation: fadeOut var(--transition-normal) ease-out forwards;
}

.slide-in-up {
  opacity: 0;
  transform: translateY(20px);
  animation: slideInUp var(--transition-normal) ease-out forwards;
}

.slide-in-down {
  opacity: 0;
  transform: translateY(-20px);
  animation: slideInDown var(--transition-normal) ease-out forwards;
}

.scale-in {
  opacity: 0;
  transform: scale(0.95);
  animation: scaleIn var(--transition-normal) ease-out forwards;
}

/* State-based visibility classes */
.show {
  display: block !important;
  opacity: 1;
  visibility: visible;
}

.hide {
  display: none !important;
}

.show-inline {
  display: inline !important;
}

.show-flex {
  display: flex !important;
}

.show-grid {
  display: grid !important;
}

/* Conditional visibility classes */
.show-on-hover {
  opacity: 0;
  visibility: hidden;
  transition: all var(--transition-fast);
}

.show-on-hover:hover,
*:hover > .show-on-hover {
  opacity: 1;
  visibility: visible;
}

.hide-on-hover {
  opacity: 1;
  visibility: visible;
  transition: all var(--transition-fast);
}

.hide-on-hover:hover,
*:hover > .hide-on-hover {
  opacity: 0;
  visibility: hidden;
}

/* ===================================================================
   Loading & State Utilities
   ================================================================ */

/* Loading state utilities */
.loading {
  position: relative;
  pointer-events: none;
}

.loading::before {
  content: "";
  position: absolute;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  background: rgba(255, 255, 255, 0.8);
  z-index: 10;
  border-radius: inherit;
}

.loading::after {
  content: "";
  position: absolute;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
  width: 20px;
  height: 20px;
  border: 2px solid var(--color-border);
  border-top-color: var(--color-primary);
  border-radius: 50%;
  z-index: 11;
  animation: spin 1s linear infinite;
}

/* Success, warning, error state utilities */
.state-success {
  color: var(--color-success);
  background-color: color-mix(in srgb, var(--color-success) 10%, transparent);
  border-color: var(--color-success);
}

.state-warning {
  color: var(--color-warning);
  background-color: color-mix(in srgb, var(--color-warning) 10%, transparent);
  border-color: var(--color-warning);
}

.state-error {
  color: var(--color-error);
  background-color: color-mix(in srgb, var(--color-error) 10%, transparent);
  border-color: var(--color-error);
}

/* Disabled state utility */
.disabled {
  opacity: 0.6;
  pointer-events: none;
  cursor: not-allowed;
}

/* ===================================================================
   Accessibility Utilities
   ================================================================ */

/* Focus trap utility for modals/dropdowns */
.focus-trap {
  position: relative;
}

.focus-trap::before,
.focus-trap::after {
  content: "";
  position: absolute;
  width: 1px;
  height: 1px;
  opacity: 0;
  pointer-events: none;
}

/* Screen reader utilities */
.sr-only-focusable:focus {
  position: static;
  width: auto;
  height: auto;
  padding: 0;
  margin: 0;
  overflow: visible;
  clip: auto;
  white-space: normal;
}

