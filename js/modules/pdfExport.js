/**
 * PDF Export Module
 * 
 * Handles PDF generation and download for workout lists using jsPDF library.
 * Simple, clean implementation with professional formatting.
 * 
 * @namespace PDFExport
 */

const PDFExport = (() => {
  "use strict";

  let isInitialized = false;

  /**
   * Initialize the module
   */
  const init = () => {
    if (isInitialized) {
      console.warn("PDFExport: Module already initialized");
      return;
    }

    if (typeof window.jspdf !== "undefined") {
      Logger.devLog("PDFExport: jsPDF library loaded successfully");
    } else {
      console.warn("PDFExport: jsPDF library not found");
    }

    isInitialized = true;
    Logger.devLog("PDFExport: Module initialized");
  };

  /**
   * Check if module is ready
   */
  const isReady = () => isInitialized;

  /**
   * Generate and download PDF using jsPDF
   */
  const exportWorkoutToPDF = (workout) => {
    if (!workout || workout.length === 0) {
      throw new Error("PDFExport: Valid workout array is required");
    }

    // Check if jsPDF is available
    if (typeof window.jspdf === "undefined") {
      console.warn("PDFExport: jsPDF not available, falling back to text export");
      exportWorkoutAsText(workout);
      return;
    }

    const { jsPDF } = window.jspdf;
    const doc = new jsPDF();

    // Get current date and time
    const currentDate = new Date().toLocaleDateString("en-US", {
      year: "numeric",
      month: "long",
      day: "numeric",
    });

    const currentTime = new Date().toLocaleTimeString("en-US", {
      hour: "2-digit",
      minute: "2-digit",
    });

    // Calculate statistics
    const stats = calculateWorkoutStats(workout);

    // PDF Layout
    let y = 20;
    const lineHeight = 7;
    const pageHeight = doc.internal.pageSize.height;
    const margin = 20;

    // Helper to check if we need a new page
    const checkNewPage = (space = 10) => {
      if (y + space > pageHeight - margin) {
        doc.addPage();
        y = 20;
      }
    };

    // === TITLE ===
    doc.setFontSize(22);
    doc.setFont(undefined, "bold");
    doc.text("MY WORKOUT PLAN", 105, y, { align: "center" });
    y += 15;

    // === SUMMARY SECTION ===
    doc.setFontSize(14);
    doc.setFont(undefined, "bold");
    doc.text("Workout Summary", 20, y);
    y += 10;

    doc.setFontSize(10);
    doc.setFont(undefined, "normal");
    doc.text(`Date: ${currentDate} at ${currentTime}`, 20, y);
    y += lineHeight;
    doc.text(`Total Exercises: ${workout.length}`, 20, y);
    y += lineHeight;
    doc.text(`Total Sets: ${stats.totalSets}`, 20, y);
    y += lineHeight;
    doc.text(`Total Reps: ${stats.totalReps}`, 20, y);
    y += lineHeight;
    doc.text(`Estimated Duration: ${stats.estimatedDuration} minutes`, 20, y);
    y += 12;

    // === MUSCLE GROUPS SECTION ===
    checkNewPage(30);
    doc.setFontSize(14);
    doc.setFont(undefined, "bold");
    doc.text("Muscle Groups", 20, y);
    y += 10;

    doc.setFontSize(10);
    doc.setFont(undefined, "normal");
    Object.entries(stats.muscleGroups).forEach(([group, count]) => {
      const label = ExerciseDatabase?.getMuscleGroupLabel?.(group) || group;
      const percentage = Math.round((count / workout.length) * 100);
      doc.text(`${label}: ${count} exercises (${percentage}%)`, 20, y);
      y += lineHeight;
    });
    y += 5;

    // === EQUIPMENT SECTION ===
    if (stats.equipment.length > 0) {
      checkNewPage(20);
      doc.setFontSize(14);
      doc.setFont(undefined, "bold");
      doc.text("Equipment Needed", 20, y);
      y += 10;

      doc.setFontSize(10);
      doc.setFont(undefined, "normal");
      doc.text(stats.equipment.join(", "), 20, y);
      y += 12;
    }

    // === EXERCISES SECTION ===
    checkNewPage(30);
    doc.setFontSize(14);
    doc.setFont(undefined, "bold");
    doc.text("Exercise List", 20, y);
    y += 10;

    workout.forEach((exercise, index) => {
      checkNewPage(30);

      const name = exercise.name || "Unknown Exercise";
      const muscleGroup = exercise.muscleGroup
        ? ExerciseDatabase?.getMuscleGroupLabel?.(exercise.muscleGroup) || exercise.muscleGroup
        : "General";
      const sets = exercise.sets || 3;
      const reps = exercise.reps || 10;
      const equipment = exercise.equipment || "bodyweight";

      // Exercise number and name
      doc.setFontSize(11);
      doc.setFont(undefined, "bold");
      doc.text(`${index + 1}. ${name}`, 20, y);
      y += 7;

      // Exercise details
      doc.setFontSize(10);
      doc.setFont(undefined, "normal");
      doc.text(`Muscle Group: ${muscleGroup}`, 25, y);
      y += lineHeight;
      doc.text(`Sets: ${sets}  |  Reps: ${reps}  |  Equipment: ${equipment}`, 25, y);
      y += 10;
    });

    // === FOOTER ===
    const totalPages = doc.internal.pages.length - 1;
    for (let i = 1; i <= totalPages; i++) {
      doc.setPage(i);
      doc.setFontSize(8);
      doc.setFont(undefined, "normal");
      doc.text(
        `Generated by Workout Generator - ${currentDate}`,
        105,
        pageHeight - 10,
        { align: "center" }
      );
      doc.text(`Page ${i} of ${totalPages}`, 190, pageHeight - 10, {
        align: "right",
      });
    }

    // Download the PDF
    doc.save("my-workout.pdf");
    Logger.devLog("PDFExport: PDF downloaded successfully");
  };

  /**
   * Calculate workout statistics
   */
  const calculateWorkoutStats = (workout) => {
    const muscleGroups = {};
    const equipmentSet = new Set();
    let totalSets = 0;
    let totalReps = 0;

    workout.forEach((exercise) => {
      // Muscle groups
      const group = exercise.muscleGroup;
      muscleGroups[group] = (muscleGroups[group] || 0) + 1;

      // Equipment
      if (exercise.equipment) {
        equipmentSet.add(exercise.equipment);
      }

      // Sets and reps
      const sets = exercise.sets || 3;
      const reps = exercise.reps || 10;
      totalSets += sets;
      totalReps += sets * reps;
    });

    // Estimate duration: ~3 minutes per set (exercise + rest)
    const estimatedDuration = totalSets * 3;

    return {
      muscleGroups,
      equipment: Array.from(equipmentSet),
      totalSets,
      totalReps,
      estimatedDuration,
    };
  };

  /**
   * Export workout as simple text file (fallback)
   */
  const exportWorkoutAsText = (workout) => {
    const currentDate = new Date().toLocaleDateString("en-US", {
      year: "numeric",
      month: "long",
      day: "numeric",
    });

    const stats = calculateWorkoutStats(workout);

    let content = "MY WORKOUT PLAN\n";
    content += "=".repeat(50) + "\n\n";
    content += `Date: ${currentDate}\n`;
    content += `Total Exercises: ${workout.length}\n`;
    content += `Total Sets: ${stats.totalSets}\n`;
    content += `Total Reps: ${stats.totalReps}\n`;
    content += `Estimated Duration: ${stats.estimatedDuration} minutes\n\n`;

    content += "MUSCLE GROUPS:\n";
    Object.entries(stats.muscleGroups).forEach(([group, count]) => {
      const label = ExerciseDatabase?.getMuscleGroupLabel?.(group) || group;
      content += `- ${label}: ${count} exercises\n`;
    });

    if (stats.equipment.length > 0) {
      content += `\nEQUIPMENT: ${stats.equipment.join(", ")}\n`;
    }

    content += "\nEXERCISES:\n";
    content += "-".repeat(50) + "\n\n";

    workout.forEach((exercise, index) => {
      const name = exercise.name || "Unknown Exercise";
      const muscleGroup = exercise.muscleGroup
        ? ExerciseDatabase?.getMuscleGroupLabel?.(exercise.muscleGroup) || exercise.muscleGroup
        : "General";
      const sets = exercise.sets || 3;
      const reps = exercise.reps || 10;
      const equipment = exercise.equipment || "bodyweight";

      content += `${index + 1}. ${name}\n`;
      content += `   Muscle Group: ${muscleGroup}\n`;
      content += `   Sets: ${sets} | Reps: ${reps} | Equipment: ${equipment}\n\n`;
    });

    content += "-".repeat(50) + "\n";
    content += `Generated by Workout Generator - ${currentDate}\n`;

    // Download as text file
    const blob = new Blob([content], { type: "text/plain;charset=utf-8" });
    const url = URL.createObjectURL(blob);
    const link = document.createElement("a");
    link.href = url;
    link.download = "my-workout.txt";
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);
    URL.revokeObjectURL(url);

    Logger.devLog("PDFExport: Text file downloaded successfully");
  };

  /**
   * Main export function
   */
  const exportWorkout = (workout, options = {}) => {
    const { format = "pdf" } = options;

    if (format === "pdf") {
      exportWorkoutToPDF(workout);
    } else {
      exportWorkoutAsText(workout);
    }
  };

  // Auto-initialize
  init();

  // Public API
  return {
    isReady,
    exportWorkout,
    exportWorkoutToPDF,
    exportWorkoutAsText,
  };
})();

// Verify module loaded
if (typeof PDFExport === "undefined") {
  throw new Error("PDFExport module failed to load");
}

// Add to window for debugging
if (typeof window !== "undefined") {
  window.PDFExport = PDFExport;
}


